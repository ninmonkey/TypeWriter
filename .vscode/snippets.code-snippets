// {
/*
    2023-06-24 : For: TypeWriter
    TypeWriter Snippets | 2023-06-24
    */
//     "outer": {
//         "description": "TypeWriter ‚á¢ New File ‚á¢ as [TypeWriter].Completer üôä",
//         ""
//         // "scope": "powershell,ps1,md,markdown",
//         // ""
//         "prefix": "tw.NewFile  ",
//         "body": [],
//     },
// }
// "Generics ‚á¢ List<T> ‚á¢ üêí": {
{
    "TypeWriter ‚á¢ New File ‚á¢ as [TypeWriter].Completer üôä": {
        "isFileTemplate": true,
        "prefix": "tw.NewFile . TypeWriter : Completer",
        // "scope": "powershell",
        "description": "TypeWriter üèÉ‚Äç‚ôÇÔ∏è ‚á¢ New File ‚á¢ as [TypeWriter].Completer üôä\n ; tw.NewFile . TypeWriter : Completer",
        "body": [
            "<# templateFrom: 2023-06-24",
            "${1:SomeCmd}",
            "",
            "USAGE:",
            "    <${1:SomeCmd}>",
            "#>",
            "\\$script:__${1:SomeCmd}CompletionsData = @(",
            "    # future: Type coerces into",
            "    @{",
            "        ShortName = '-h'",
            "        FullName  = '--help'",
            "        ToolTip = 'Print help information'",
            "    }",
            "    @{",
            "        ShortName = '-H'",
            "        FullName  = '--hidden'",
            "        Tooltip   = 'Search hidden files and directories'",
            "",
            "        LongHelp = @'",
            "-H, --hidden",
            "        Include ...",
            "        director...",
            "        name sta...",
            "'@",
            "    }",
            "    @{",
            "        # ShortName = '-X'",
            "        FullName  = '--search-path'",
            "        ToolTip = 'paths to search as an alternative to the positional <path> argument'",
            "        Rest      = '<path>'",
            "        LongHelp = @'",
            "--search-path <search-path>",
            "Provide paths to search as an alternative to the positional <path> argument. Changes ",
            "        ${1:SomeCmd} [OPTIONS] --search-path <path> --search-path <path2> [<pattern>]",
            "'@ | tw.Format-NormalizeLineEnding",
            "    }",
            ")",
            "",
            "function __generateCompletions_${1:SomeCmd} {",
            "    # not the cleanest, but generates two records if there is an alias, else 1",
            "    # \\$GenerationModeNew = \\$false",
            "    # if (\\$GenerationModeNew) {",
            "    #     write-warning 'may not quite work yet'",
            "    #     return \\$__${1:SomeCmd}CompletionsData | % {",
            "    #         [TWCompletionResult]::new( \\$_ ).AsCompletionResult()",
            "",
            "    #         if ( -not [string]::IsNullOrWhiteSpace( \\$_.ShortName ) ) {",
            "    #             \\$hashAlias = [hashtable]::new( \\$_ )",
            "    #             \\$hashAlias.FullName = \\$hashAlias.ShortName",
            "    #             [TWCompletionResult]::new( \\$hashAlias ).AsCompletionResult()",
            "    #         }",
            "    #     }",
            "    #     return",
            "    # }",
            "",
            "    return \\$script:__${1:SomeCmd}CompletionsData | % {",
            "        \\$record = \\$_",
            "        \\$NewCompletionResultSplat = @{",
            "            Text         = \\$record.FullName",
            "            listItemText = \\$record.FullName",
            "            resultType   = 'ParameterValue'",
            "            toolTip      = \\$record.ToolTip ?? '<missing>'",
            "        }",
            "        if (\\$record.ShortName) {",
            "            \\$NewCompletionResultSplat.Alias = \\$record.ShortName",
            "        }",
            "        tw.New-CompletionResult @NewCompletionResultSplat",
            "    } | Sort-Object CompletionText",
            "}",
            "",
            "function Register-TypeCompleterCommand${1:SomeCmd} {",
            "    <#",
            "    .SYNOPSIS",
            "        completions to '${1:SomeCmd}'",
            "    .DESCRIPTION",
            "",
            "    .NOTES",
            "    future:",
            "        - [ ] stuff",
            "",
            "    .EXAMPLE",
            "        Register-TypeCompleterCommand${1:SomeCmd}",
            "",
            "    #>",
            "    \\$cmdScriptBlock = {",
            "        param(\\$wordToComplete, \\$commandAst, \\$cursorPosition)",
            "",
            "        return [Collections.Generic.List[Object]]\\$GeneratedCompletions = @(",
            "            __generateCompletions_${1:SomeCmd}",
            "        ) | Sort-Object CompletionText",
            "    }",
            "    Register-ArgumentCompleter -Native -CommandName '${1:SomeCmd}' -ScriptBlock \\$cmdScriptBlock",
            "}",
        ],
    },
}
